Exercise 6: Library Management System

1. Understanding Search Algorithms

Linear Search:
- Description: Linear search is a straightforward algorithm where each element in the list is checked sequentially until the desired element is found or the list ends.
- Time Complexity:
  - Best Case: O(1) (element found at the first position)
  - Worst Case: O(n) (element found at the last position or not present)
  - Average Case: O(n) (on average, half of the elements are checked)

Binary Search:
- Description: Binary search is an efficient algorithm that requires the list to be sorted. It works by comparing the target value with the middle element of the list, and then recursively searching the left or right half.
- Time Complexity:
  - Best Case: O(1) (element found at the middle)
  - Worst Case: O(log n) (dividing the list in half each step)
  - Average Case: O(log n)



4. Analysis

Time Complexity:
1. Linear Search:
   - Best Case: O(1) - The book is at the start of the list.
   - Average Case: O(n) - The book is somewhere in the middle.
   - Worst Case: O(n) - The book is at the end or not in the list.
2. Binary Search:
   - Best Case: O(1) - The middle element is the target.
   - Average Case: O(log n) - The target book could be anywhere in the list.
   - Worst Case: O(log n) - The book is not present, and all divisions are performed.
When to Use Each Algorithm:
- Linear Search:
  - Suitable for small datasets or unsorted data. It's simple and doesn't require preprocessing like sorting.
  - When the cost of sorting is higher than the cost of searching (e.g., very few searches).
- Binary Search:
  - Suitable for large datasets where the list can be sorted. It is efficient due to its logarithmic time complexity.
  - Preferred when there are frequent searches, as the time saved in search outweighs the sorting cost.
In a library management system with a large number of books and frequent search operations, binary search is generally preferred for its efficiency, provided the list is kept sorted.