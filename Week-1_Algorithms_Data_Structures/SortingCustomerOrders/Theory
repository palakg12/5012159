Exercise 3: Sorting Customer Orders

1. Understanding Sorting Algorithms
Bubble Sort:
- Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass-through is repeated until the list is sorted.
- Time Complexity:
  - Best Case: O(n) (when the array is already sorted)
  - Average Case: O(n²)
  - Worst Case: O(n²)

Insertion Sort:
- Insertion Sort builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.
- Time Complexity:
  - Best Case: O(n) (when the array is already sorted)
  - Average Case: O(n²)
  - Worst Case: O(n²)

Quick Sort:
- Quick Sort is an efficient, divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot.
- Time Complexity:
  - Best Case: O(n log n)
  - Average Case: O(n log n)
  - Worst Case: O(n²) (when the smallest or largest element is always chosen as the pivot)

Merge Sort:
- Merge Sort is an efficient, stable, comparison-based, divide-and-conquer sorting algorithm. Most implementations produce a stable sort, meaning that the order of equal elements is the same in the input and output.
- Time Complexity:
  - Best Case: O(n log n)
  - Average Case: O(n log n)
  - Worst Case: O(n log n)

4. Analysis
Time Complexity:
- Bubble Sort:
  - Best Case: O(n) (when the list is already sorted)
  - Average and Worst Case: O(n²) (due to nested loops)

- Quick Sort:
  - Best and Average Case: O(n log n) (partitioning and recursive sorting of sub-arrays)
  - Worst Case: O(n²) (when the pivot selection is poor, e.g., smallest or largest element always chosen)

Why Quick Sort is Preferred Over Bubble Sort:
1. Efficiency: Quick Sort generally has a better average-case time complexity (O(n log n)) compared to Bubble Sort's O(n²). This makes Quick Sort much faster on average, especially for large datasets.
2. Divide and Conquer: Quick Sort uses the divide-and-conquer approach, which is more efficient for large lists, splitting the problem into smaller sub-problems and solving them recursively.
3. Less Overhead: Bubble Sort is simple but inefficient for large lists, with each pass through the list requiring n comparisons. Quick Sort, on the other hand, reduces the number of comparisons and swaps needed by efficiently partitioning the list.

While Quick Sort is generally preferred, it can degrade to O(n²) time complexity in the worst-case scenario, usually mitigated by choosing good pivot elements (e.g., using randomized or median-of-three pivot selection strategies).